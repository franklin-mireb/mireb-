import express from 'express';
import OpenAI from 'openai';

const router = express.Router();
// Configuration OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || ''
});
// Historique des conversations (en production, utiliser une base de donnÃ©es)
const chatHistory = new Map();
// SystÃ¨me de prompts pour le chatbot Mireb
const SYSTEM_PROMPTS = {
  commercial: `Tu es l'assistant commercial intelligent de Mireb Commercial, une plateforme e-commerce innovante au Congo RDC.
CONTEXTE:
- Mireb Commercial vend des produits Ã©lectroniques, mode, maison, beautÃ©, sport, etc.
- Tu aides les clients Ã  trouver des produits, rÃ©pondre aux questions, et faciliter les achats
- Tu es expert en recommandations personnalisÃ©es et service client
INSTRUCTIONS:
1. Sois chaleureux, professionnel et serviable
2. Pose des questions pertinentes pour comprendre les besoins
3. Recommande des produits appropriÃ©s
4. Fournis des informations sur les prix, livraison, garanties
5. Encourage l'achat en mettant en avant les avantages
6. RÃ©ponds en franÃ§ais avec un ton amical et commercial
PRODUITS DISPONIBLES:
- Ã‰lectronique: smartphones, ordinateurs, accessoires
- Mode: vÃªtements homme/femme, chaussures, accessoires
- Maison: meubles, dÃ©coration, Ã©lectromÃ©nager
- BeautÃ©: cosmÃ©tiques, parfums, soins
- Sport: Ã©quipements, vÃªtements de sport
Si tu ne connais pas un produit spÃ©cifique, propose des alternatives similaires et encourage Ã  contacter l'Ã©quipe pour plus d'informations.`,
  support: `Tu es l'assistant support client de Mireb Commercial.
Tu aides avec:
- Questions sur les commandes
- ProblÃ¨mes de livraison
- Retours et Ã©changes
- ProblÃ¨mes techniques
- Informations sur les garanties
Sois patient, empathique et solution-oriented.`,
  technique: `Tu es l'assistant technique de Mireb Commercial.
- SpÃ©cifications techniques des produits
- Comparaisons de produits
- Conseils d'utilisation
- ProblÃ¨mes de compatibilitÃ©
- Guides d'installation
Fournis des informations prÃ©cises et techniques.`
};
// POST /api/chatbot/chat - Interaction avec le chatbot
router.post('/chat', async (req, res) => {
  try {
    const { 
      message, 
      sessionId, 
      context = 'commercial',
      produits = [],
      userId = null 
    } = req.body;
    if (!message || !sessionId) {
      return res.status(400).json({
        success: false,
        message: 'Message et sessionId requis'
      });
    }
    // RÃ©cupÃ©rer l'historique de la conversation
    if (!chatHistory.has(sessionId)) {
      chatHistory.set(sessionId, []);
    const history = chatHistory.get(sessionId);
    // Construire le contexte avec les produits
    let contextMessage = SYSTEM_PROMPTS[context] || SYSTEM_PROMPTS.commercial;
    
    if (produits.length > 0) {
      contextMessage += `\n\nPRODUITS ACTUELLEMENT DISPONIBLES:\n`;
      produits.slice(0, 10).forEach(p => {
        contextMessage += `- ${p.nom}: ${p.prix}$ (${p.categorie}) - ${p.description?.substring(0, 100)}...\n`;
    // PrÃ©parer les messages pour OpenAI
    const messages = [
      { role: 'system', content: contextMessage },
      ...history.map(h => ({ role: h.role, content: h.content })),
      { role: 'user', content: message }
    ];
    // Appel Ã  OpenAI (si API key disponible)
    let botResponse;
    if (process.env.OPENAI_API_KEY) {
      try {
        const completion = await openai.chat.completions.create({
          model: 'gpt-3.5-turbo',
          messages: messages,
          max_tokens: 500,
          temperature: 0.7,
          presence_penalty: 0.1,
          frequency_penalty: 0.1
        });
        botResponse = completion.choices[0].message.content;
      } catch (openaiError) {
        console.error('Erreur OpenAI:', openaiError);
        botResponse = generateFallbackResponse(message, produits);
      }
    } else {
      // RÃ©ponse de fallback si pas d'API key
      botResponse = generateFallbackResponse(message, produits);
    // Ajouter Ã  l'historique
    history.push({ role: 'user', content: message });
    history.push({ role: 'assistant', content: botResponse });
    // Limiter l'historique Ã  20 messages
    if (history.length > 20) {
      history.splice(0, history.length - 20);
    // Mettre Ã  jour l'historique
    chatHistory.set(sessionId, history);
    res.json({
      success: true,
      data: {
        response: botResponse,
        sessionId,
        messageCount: history.length
    });
  } catch (error) {
    console.error('Erreur chatbot:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur du chatbot',
      error: error.message
  }
// Fonction de rÃ©ponse de fallback
function generateFallbackResponse(message, produits) {
  const messageLower = message.toLowerCase();
  
  // DÃ©tection d'intention basique
  if (messageLower.includes('prix') || messageLower.includes('coÃ»t') || messageLower.includes('combien')) {
      const produitExemple = produits[0];
      return `Nos prix varient selon les produits. Par exemple, ${produitExemple.nom} coÃ»te ${produitExemple.prix}$. Quel type de produit vous intÃ©resse pour que je puisse vous donner des prix prÃ©cis ?`;
    return "Nos prix sont trÃ¨s compÃ©titifs ! Dites-moi quel produit vous cherchez et je vous donnerai le prix exact.";
  if (messageLower.includes('livraison') || messageLower.includes('dÃ©lai')) {
    return "Nous livrons dans tout Kinshasa sous 24-48h et dans les autres villes du Congo sous 3-5 jours. La livraison est gratuite pour les commandes de plus de 50$. Voulez-vous plus d'informations sur une commande spÃ©cifique ?";
  if (messageLower.includes('produit') || messageLower.includes('cherche') || messageLower.includes('besoin')) {
      const categories = [...new Set(produits.map(p => p.categorie))];
      return `Nous avons une large gamme de produits dans ces catÃ©gories : ${categories.join(', ')}. Quelle catÃ©gorie vous intÃ©resse le plus ? Je peux vous recommander les meilleurs produits !`;
    return "Nous avons des produits Ã©lectroniques, mode, maison, beautÃ© et sport. Quelle catÃ©gorie vous intÃ©resse ?";
  if (messageLower.includes('bonjour') || messageLower.includes('salut') || messageLower.includes('hello')) {
    return "Bonjour ! ðŸ‘‹ Bienvenue chez Mireb Commercial ! Je suis votre assistant personnel pour vous aider Ã  trouver les meilleurs produits. Que puis-je faire pour vous aujourd'hui ?";
  if (messageLower.includes('merci') || messageLower.includes('thanks')) {
    return "Avec plaisir ! ðŸ˜Š N'hÃ©sitez pas si vous avez d'autres questions. Je suis lÃ  pour vous aider Ã  faire le meilleur choix !";
  if (messageLower.includes('contact') || messageLower.includes('tÃ©lÃ©phone') || messageLower.includes('whatsapp')) {
    return "Vous pouvez nous contacter directement via WhatsApp au +243 842 267 252 ou par email Ã  mirebshop@gmail.com. Notre Ã©quipe est disponible 7j/7 pour vous accompagner ! ðŸ“±";
  // RÃ©ponse gÃ©nÃ©rique
  return "Je suis lÃ  pour vous aider Ã  trouver les meilleurs produits chez Mireb Commercial ! Pouvez-vous me dire plus prÃ©cisÃ©ment ce que vous cherchez ? (produits, prix, livraison, etc.)";
}
// GET /api/chatbot/history/:sessionId - RÃ©cupÃ©rer l'historique d'une session
router.get('/history/:sessionId', async (req, res) => {
    const { sessionId } = req.params;
    const history = chatHistory.get(sessionId) || [];
        messages: history,
        count: history.length
    console.error('Erreur rÃ©cupÃ©ration historique:', error);
      message: 'Erreur lors de la rÃ©cupÃ©ration de l\'historique',
// DELETE /api/chatbot/history/:sessionId - Effacer l'historique d'une session
router.delete('/history/:sessionId', async (req, res) => {
    chatHistory.delete(sessionId);
      message: 'Historique effacÃ© avec succÃ¨s'
    console.error('Erreur effacement historique:', error);
      message: 'Erreur lors de l\'effacement de l\'historique',
// POST /api/chatbot/feedback - Envoyer un feedback sur une rÃ©ponse
router.post('/feedback', async (req, res) => {
    const { sessionId, messageIndex, rating, comment } = req.body;
    if (!sessionId || messageIndex === undefined) {
        message: 'SessionId et messageIndex requis'
    // En production, sauvegarder en base de donnÃ©es
    console.log('Feedback reÃ§u:', { sessionId, messageIndex, rating, comment });
      message: 'Feedback enregistrÃ© avec succÃ¨s'
    console.error('Erreur feedback:', error);
      message: 'Erreur lors de l\'enregistrement du feedback',
// GET /api/chatbot/stats - Statistiques du chatbot
router.get('/stats', async (req, res) => {
    const totalSessions = chatHistory.size;
    const totalMessages = Array.from(chatHistory.values())
      .reduce((total, history) => total + history.length, 0);
    const activeSessions = Array.from(chatHistory.entries())
      .filter(([sessionId, history]) => {
        // Sessions actives dans les derniÃ¨res 24h
        return history.length > 0;
      }).length;
        totalSessions,
        totalMessages,
        activeSessions,
        averageMessagesPerSession: totalSessions > 0 ? (totalMessages / totalSessions).toFixed(1) : 0
    console.error('Erreur stats chatbot:', error);
      message: 'Erreur lors de la rÃ©cupÃ©ration des statistiques',
// POST /api/chatbot/recommendations - Obtenir des recommandations de produits
router.post('/recommendations', async (req, res) => {
    const { preferences, budget, categorie, produits = [] } = req.body;
    if (!produits.length) {
      return res.json({
        success: true,
        data: {
          recommendations: [],
          message: "Aucun produit disponible pour le moment."
        }
    // Filtrage basique
    let filtered = produits.filter(p => p.stock > 0);
    if (categorie) {
      filtered = filtered.filter(p => 
        p.categorie.toLowerCase().includes(categorie.toLowerCase())
      );
    if (budget && budget.max) {
      filtered = filtered.filter(p => p.prix <= budget.max);
    if (budget && budget.min) {
      filtered = filtered.filter(p => p.prix >= budget.min);
    // Tri par popularitÃ©/rating
    filtered.sort((a, b) => {
      const scoreA = (a.rating || 0) + (a.analytics?.vues || 0) / 100;
      const scoreB = (b.rating || 0) + (b.analytics?.vues || 0) / 100;
      return scoreB - scoreA;
    // Prendre les 5 meilleurs
    const recommendations = filtered.slice(0, 5);
        recommendations,
        totalFound: filtered.length,
        message: recommendations.length > 0 
          ? `J'ai trouvÃ© ${recommendations.length} produit(s) qui correspondent Ã  vos critÃ¨res !`
          : "DÃ©solÃ©, aucun produit ne correspond Ã  vos critÃ¨res. Essayez d'Ã©largir votre recherche."
    console.error('Erreur recommandations:', error);
      message: 'Erreur lors de la gÃ©nÃ©ration des recommandations',
export default router;
