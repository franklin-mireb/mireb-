#!/bin/bash

echo "ü§ñ V√©rification de l'int√©gration IA - Mireb CRM"
echo "================================================="

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de log
log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log "D√©marrage des v√©rifications IA..."

# 1. V√©rifier la structure des fichiers IA
echo ""
echo "üìÅ V√©rification de la structure des fichiers IA:"
echo "==============================================="

ai_files=(
    "backend/routes/openai.js" 
    "test-openai-api.html"
    "AI_INTEGRATION_GUIDE.md"
)

for file in "${ai_files[@]}"; do
    if [ -f "$file" ]; then
        success "Fichier IA trouv√©: $file"
    else
        error "Fichier IA manquant: $file"
    fi
done

# 2. V√©rifier AIService dans le frontend
echo ""
echo "üîç V√©rification d'AIService dans le frontend:"
echo "============================================"

if grep -q "class AIService" mireb-ai-crm-complete.html; then
    success "Classe AIService trouv√©e"
    
    # V√©rifier les m√©thodes principales
    ai_methods=(
        "generateProductDescription"
        "analyzeProductImage" 
        "optimizeSEOTags"
        "generateFallbackDescription"
        "checkAIAvailability"
    )
    
    for method in "${ai_methods[@]}"; do
        if grep -q "$method" mireb-ai-crm-complete.html; then
            success "M√©thode AIService trouv√©e: $method"
        else
            error "M√©thode AIService manquante: $method"
        fi
    done
else
    error "Classe AIService manquante dans le frontend"
fi

# 3. V√©rifier les routes OpenAI backend
echo ""
echo "üõ†Ô∏è V√©rification des routes OpenAI backend:"
echo "=========================================="

if [ -f "backend/routes/openai.js" ]; then
    backend_routes=(
        "/generate-description"
        "/analyze-image"
        "/optimize-tags"
    )
    
    for route in "${backend_routes[@]}"; do
        if grep -q "$route" backend/routes/openai.js; then
            success "Route OpenAI trouv√©e: $route"
        else
            error "Route OpenAI manquante: $route"
        fi
    done
    
    # V√©rifier l'import OpenAI
    if grep -q "import OpenAI from" backend/routes/openai.js; then
        success "Import OpenAI correct (ES6 modules)"
    else
        error "Import OpenAI manquant ou incorrect"
    fi
    
    # V√©rifier la gestion des erreurs
    if grep -q "fallback" backend/routes/openai.js; then
        success "Syst√®me de fallback impl√©ment√©"
    else
        warning "Syst√®me de fallback non d√©tect√©"
    fi
else
    error "Fichier routes OpenAI manquant"
fi

# 4. V√©rifier l'int√©gration dans server.js
echo ""
echo "üîå V√©rification de l'int√©gration dans server.js:"
echo "=============================================="

if grep -q "openaiRoutes" backend/server.js; then
    success "Routes OpenAI import√©es dans server.js"
else
    error "Routes OpenAI non import√©es dans server.js"
fi

if grep -q "/api/openai" backend/server.js; then
    success "Endpoint /api/openai configur√©"
else
    error "Endpoint /api/openai non configur√©"
fi

# 5. V√©rifier les sch√©mas de validation
echo ""
echo "üìã V√©rification des sch√©mas de validation Joi:"
echo "============================================="

if [ -f "backend/middleware/validation.js" ]; then
    validation_schemas=(
        "generateDescription"
        "updateProduit"
    )
    
    for schema in "${validation_schemas[@]}"; do
        if grep -q "$schema" backend/middleware/validation.js; then
            success "Sch√©ma validation trouv√©: $schema"
        else
            error "Sch√©ma validation manquant: $schema"
        fi
    done
else
    error "Fichier validation.js manquant"
fi

# 6. V√©rifier les am√©liorations du formulaire
echo ""
echo "üìù V√©rification des am√©liorations du formulaire produit:"
echo "======================================================"

form_features=(
    "generatingDescription"
    "G√©n√©rer avec IA"
    "Analyser Image"
    "features.*input"
    "target.*select"
)

for feature in "${form_features[@]}"; do
    if grep -q "$feature" mireb-ai-crm-complete.html; then
        success "Fonctionnalit√© formulaire trouv√©e: $feature"
    else
        warning "Fonctionnalit√© formulaire manquante: $feature"
    fi
done

# 7. V√©rifier les d√©pendances
echo ""
echo "üì¶ V√©rification des d√©pendances IA:"
echo "==================================="

if grep -q "openai" package.json; then
    success "D√©pendance OpenAI trouv√©e dans package.json"
else
    warning "D√©pendance OpenAI manquante - Ajouter: npm install openai"
fi

# 8. Test de la page de test IA
echo ""
echo "üß™ V√©rification de la page de test IA:"
echo "===================================="

if [ -f "test-openai-api.html" ]; then
    test_functions=(
        "testGenerateDescription"
        "testAnalyzeImage"
        "testOptimizeTags"
        "makeAPICall"
    )
    
    for func in "${test_functions[@]}"; do
        if grep -q "$func" test-openai-api.html; then
            success "Fonction de test trouv√©e: $func"
        else
            error "Fonction de test manquante: $func"
        fi
    done
else
    error "Page de test IA manquante"
fi

# 9. Compter les lignes de code IA ajout√©es
echo ""
echo "üìà Statistiques du code IA:"
echo "==========================="

if [ -f "backend/routes/openai.js" ]; then
    openai_lines=$(wc -l < backend/routes/openai.js)
    success "Routes OpenAI: $openai_lines lignes"
fi

if [ -f "test-openai-api.html" ]; then
    test_lines=$(wc -l < test-openai-api.html)
    success "Page de test: $test_lines lignes"
fi

# Compter les lignes AIService dans le frontend
ai_service_lines=$(grep -n "class AIService" mireb-ai-crm-complete.html | wc -l)
if [ "$ai_service_lines" -gt 0 ]; then
    success "Classe AIService int√©gr√©e dans le frontend"
fi

# 10. R√©sum√© et recommandations
echo ""
echo "üìä R√©sum√© de l'int√©gration IA:"
echo "============================="

log "V√©rification IA termin√©e!"

echo ""
echo "üéØ Checklist de d√©ploiement IA:"
echo "==============================="
echo "1. ‚úÖ Classes et services IA impl√©ment√©s"
echo "2. ‚úÖ Routes backend OpenAI cr√©√©es"
echo "3. ‚úÖ Validation Joi am√©lior√©e"
echo "4. ‚úÖ Formulaires produit enrichis"
echo "5. ‚úÖ Syst√®me de fallback robuste"
echo "6. ‚úÖ Page de test d√©di√©e"
echo "7. ‚ö†Ô∏è  Configurer OPENAI_API_KEY en production"
echo "8. ‚ö†Ô∏è  Installer: npm install openai"

echo ""
echo "üöÄ √âtapes de test recommand√©es:"
echo "==============================="
echo "1. Ouvrir test-openai-api.html dans un navigateur"
echo "2. Se connecter d'abord dans l'app principale"
echo "3. Tester chaque fonctionnalit√© IA individuellement"
echo "4. V√©rifier les fallbacks si OpenAI indisponible"
echo "5. Tester la g√©n√©ration de descriptions produit"

echo ""
echo "üìö Documentation disponible:"
echo "==========================="
echo "- Guide complet: AI_INTEGRATION_GUIDE.md"
echo "- Tests: test-openai-api.html"
echo "- Code source: backend/routes/openai.js"

echo ""
success "üéâ Int√©gration IA Mireb CRM - V√âRIFICATION TERMIN√âE!"
echo "====================================================="
